#@ppsgs
# This makefile was generated by makemake.py (2024-05-30 17:26).
# GitHub repository: https://github.com/lars-frogner/makemake.py
#
# Usage:
# make <argument 1> <argument 2> ...
#
# Arguments:
# <none>:  Compiles with no compiler flags.
# debug:   Compiles with flags useful for debugging.
# fast:    Compiles with flags for high performance.
# profile: Compiles with flags for profiling.
# gprof:   Displays the profiling results with gprof.
# clean:   Deletes auxiliary files.
# help:    Displays this help text.
#
# To compile with additional flags, add the argument
# EXTRA_FLAGS="<flags>"

# Define variables
COMPILER = gfortran
EXECUTABLE = ppsgs.exe
OBJECT_FILES = ppsgs.o kdtree2_mask.o sspsv.o rotate.o normal.o variogram.o f90getopt.o progress_bar.o inssor.o
MODULE_FILES = kdtree2_precision_module.mod kdtree2_priority_queue_module.mod kdtree2_module.mod rotation.mod normal_dist.mod variogram.mod f90getopt.mod m_inssor.mod
COMPILATION_FLAGS = -ffree-line-length-none -fdec -cpp -fbacktrace
LINKING_FLAGS =
DEBUGGING_FLAGS = -Og -Wall -Wextra -Wconversion -pedantic -Wno-tabs -fbounds-check -ffpe-trap=zero,overflow
PERFORMANCE_FLAGS = -O3
PROFILING_FLAGS = -pg
HEADER_PATH_FLAGS =
LIBRARY_LINKING_FLAGS =
LIBRARY_PATH_FLAGS =

# Make sure certain rules are not activated by the presence of files
.PHONY: all debug fast profile set_debug_flags set_fast_flags set_profile_flags clean gprof help

# Define default target group
all: $(EXECUTABLE)

# Define optional target groups
debug: set_debug_flags $(EXECUTABLE)
fast: set_fast_flags $(EXECUTABLE)
profile: set_profile_flags $(EXECUTABLE)

# Defines appropriate compiler flags for debugging
set_debug_flags:
	$(eval COMPILATION_FLAGS = $(COMPILATION_FLAGS) $(DEBUGGING_FLAGS))

# Defines appropriate compiler flags for high performance
set_fast_flags:
	$(eval COMPILATION_FLAGS = $(COMPILATION_FLAGS) $(PERFORMANCE_FLAGS))

# Defines appropriate compiler flags for profiling
set_profile_flags:
	$(eval COMPILATION_FLAGS = $(COMPILATION_FLAGS) $(PROFILING_FLAGS))
	$(eval LINKING_FLAGS = $(LINKING_FLAGS) $(PROFILING_FLAGS))

# Rule for linking object files
$(EXECUTABLE): $(OBJECT_FILES)
	$(COMPILER) $(EXTRA_FLAGS) $(LINKING_FLAGS) $(OBJECT_FILES) $(LIBRARY_PATH_FLAGS) $(LIBRARY_LINKING_FLAGS) -o $(EXECUTABLE)

# Rule for compiling ppsgs.f90
ppsgs.o: ppsgs.f90 f90getopt.o inssor.o rotate.o normal.o variogram.o kdtree2_mask.o sspsv.o progress_bar.o
	$(COMPILER) -c $(EXTRA_FLAGS) $(COMPILATION_FLAGS) "./ppsgs.f90"

# Rule for compiling kdtree2_mask.f90
kdtree2_mask.o: ./kdtree2_mask.f90
	$(COMPILER) -c $(EXTRA_FLAGS) $(COMPILATION_FLAGS) "./kdtree2_mask.f90"

# Rule for compiling sspsv.f
sspsv.o: ./sspsv.f
	$(COMPILER) -c $(EXTRA_FLAGS) $(COMPILATION_FLAGS) "./sspsv.f"

# Rule for compiling rotate.f90
rotate.o : ./rotate.f90
	$(COMPILER) -c $(EXTRA_FLAGS) $(COMPILATION_FLAGS) "./rotate.f90"

# Rule for compiling normal.f90
normal.o : ./normal.f90
	$(COMPILER) -c $(EXTRA_FLAGS) $(COMPILATION_FLAGS) "./normal.f90"

# Rule for compiling variogram.f90
variogram.o : ./variogram.f90
	$(COMPILER) -c $(EXTRA_FLAGS) $(COMPILATION_FLAGS) "./variogram.f90"

# Rule for compiling f90getopt.F90
f90getopt.o : ../common/f90getopt.F90
	$(COMPILER) -c $(EXTRA_FLAGS) $(COMPILATION_FLAGS) "../common/f90getopt.F90"

# Rule for compiling progress_bar.f90
progress_bar.o: ../common/progress_bar.F90
	$(COMPILER) -c $(EXTRA_FLAGS) $(COMPILATION_FLAGS) "../common/progress_bar.F90"

# Rule for compiling inssor.f90
inssor.o : ../sorting/inssor.f90
	$(COMPILER) -c $(EXTRA_FLAGS) $(COMPILATION_FLAGS) "../sorting/inssor.f90"

# Action for removing all auxiliary files
clean:
	rm -f $(OBJECT_FILES) $(MODULE_FILES) 2>nul

# Action for reading profiling results
gprof:
	gprof $(EXECUTABLE)

# Action for printing help text
help:
	@echo Usage: & echo make ^<argument 1^> ^<argument 2^> ... & echo. & echo Arguments:  & echo ^<none^>:  Compiles with no compiler flags. & echo debug:   Compiles with flags useful for debugging. & echo fast:    Compiles with flags for high performance. & echo profile: Compiles with flags for profiling.